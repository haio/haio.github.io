<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Grunt | Zhong Yu's Blog]]></title>
  <link href="http://haio.github.io/blog/categories/grunt/atom.xml" rel="self"/>
  <link href="http://haio.github.io/"/>
  <updated>2014-03-09T13:00:57+08:00</updated>
  <id>http://haio.github.io/</id>
  <author>
    <name><![CDATA[Zhong Yu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tools that make web dev more productive]]></title>
    <link href="http://haio.github.io/blog/2013/11/22/tools-that-make-web-dev-more-productive/"/>
    <updated>2013-11-22T22:02:00+08:00</updated>
    <id>http://haio.github.io/blog/2013/11/22/tools-that-make-web-dev-more-productive</id>
    <content type="html"><![CDATA[<p><img class="<a" src="href="http://haio.u.qiniudn.com/toolset.png">http://haio.u.qiniudn.com/toolset.png</a>" width="600" height="200" title="Tools that make web dev more productive" ></p>

<h1>Grunt</h1>

<p><a href="http://gruntjs.com">Grunt</a>是一个Javascript写的任务管理工具(Tasks Runner)。在Web开发中，出了写代码之外，我们还有一序
列的任务要做，比如:</p>

<!-- more -->


<ul>
<li><strong>minification</strong> javascript,css,html代码的压缩</li>
<li><strong>compilation</strong> .less,.sass,.coffee等文件编译</li>
<li><strong>testing</strong> 单元测试，集成测试，各种测试</li>
<li><strong>linting</strong> js linting
&hellip;&hellip;</li>
</ul>


<p>以前，这些任务都分散在不同小任务中，我们也有很多工具来'自动化'这些任务，比如javaer有<code>maven</code>以及一堆xml代码搭成的<code>ant</code>
,这里就不细说了，实在感兴趣的可以去Google学习下。Grunt相比他们来说进步了很多，它更加的简易，强大和可扩展，你几乎可以
找到一切你想要或不想要的任务plugin来加速你的开发流程，当然你也可以很方面的编写自己的插件。并且在Grunt中你不需要写
shell，不需要写xml，只需要写我们最爱的JSON和Javascript。</p>

<h2>Install grunt CLI</h2>

<p><code>js
npm install -g grunt-cli
</code></p>

<p>安装完<code>gurnt-cli</code>之后<code>grunt</code>就成为你系统中的可执行命令了，他并没有安装了任何版本的grunt，当你执行<code>grunt</code>时候它会在当
前目录下寻找已有的grunt来跑定义好的任务。</p>

<h2>使用Grunt</h2>

<h3>安装Grunt</h3>

<p>Grunt本身也是一个<code>npm package</code>，由于只是开发中使用，所以我们可以将它安装在devDependencies中：</p>

<p><code>js
npm install grunt --save-dev
</code></p>

<p>然后我们会安装一些常用的grunt插件，比如jshint,uglify等</p>

<p><code>js
npm install grunt-contrib-jshint --save-dev
npm install grunt-contrib-uglify --save-dev
</code></p>

<p>之后我们就可以来构建自己的Grunt任务了，Grunt的所有要运行的任务包含在一个叫<code>Gruntfile.js</code>的文件中</p>

<h3>Gruntfile.js</h3>

<p>Gruntfile.js由下面几部分组成：</p>

<ul>
<li>The &ldquo;wrapper&rdquo; function</li>
<li>Project and task configuration</li>
<li>Loading Grunt plugins and tasks</li>
<li>Custom tasks</li>
</ul>


<p>```js
module.exports = function(grunt) {</p>

<p>  // Project configuration.
  grunt.initConfig({</p>

<pre><code>pkg: grunt.file.readJSON('package.json'),
uglify: {
  options: {
    banner: '/*! &lt;%= pkg.name %&gt; &lt;%= grunt.template.today("yyyy-mm-dd") %&gt; */\n'
  },
  build: {
    src: 'src/&lt;%= pkg.name %&gt;.js',
    dest: 'build/&lt;%= pkg.name %&gt;.min.js'
  }
}
</code></pre>

<p>  });</p>

<p>  // Load the plugin that provides the &ldquo;uglify&rdquo; task.
  grunt.loadNpmTasks(&lsquo;grunt-contrib-uglify&rsquo;);</p>

<p>  // Default task(s).
  grunt.registerTask(&lsquo;default&rsquo;, [&lsquo;uglify&rsquo;]);</p>

<p>};
```</p>

<h3>Wrapper function</h3>

<p>Grunt是由Node.js写的，从它的wrapper函数可以看出Grunt是被放到一个闭包中然后赋给module.exports供外部使用</p>

<p>```js
module.exports = function (grunt) {</p>

<pre><code>grunt.initConfig({
    // tasks 
});
</code></pre>

<p>};
```</p>

<h3>Project and task configuration</h3>

<p>```js
grunt.initConfig({
  pkg: grunt.file.readJSON(&lsquo;package.json&rsquo;),
  uglify: {</p>

<pre><code>options: {
  banner: '/*! &lt;%= pkg.name %&gt; &lt;%= grunt.template.today("yyyy-mm-dd") %&gt; */\n'
},
build: {
  src: 'src/&lt;%= pkg.name %&gt;.js',
  dest: 'build/&lt;%= pkg.name %&gt;.min.js'
}
</code></pre>

<p>  }
});
```</p>

<p>首先，<code>grunt.file.readJSON('package.json')</code>获取了当前项目的配置信息，比如项目的名字<code>pkg.name</code>,然后是任务的定义，这里
以<code>uglify</code>为例，<code>uglify</code>是任务的名字，<code>options</code>中定义了要传给当前任务的一些参数或者配置信息，<code>build</code>是子任务的名字，
<code>src</code>和<code>dest</code>分别用来设置子任务的参数。
完成以上配置之后，我们既有一个叫做uglify:build的任务可以使用了。</p>

<h3>Loading Grunt plugins and tasks</h3>

<p>要运行定义好的任务，我们就可能需要加载相应的插件，加载已安装的uglify插件：</p>

<p><code>js
grunt.loadNpmTasks('grunt-contrib-uglify');
</code></p>

<h3>Custom tasks</h3>

<p>要执行上面定义好的uglify任务，只需要执行：</p>

<p><code>js
grunt uglify
</code></p>

<p>我们也可以定义默认的任务</p>

<p><code>js
// Default task(s).
grunt.registerTask('default', ['uglify']);
</code></p>

<p><code>['uglify']</code>里可以包含一序列的其他任务，现在要执行uglify任务，我们可以执行<code>grunt default</code>或者直接<code>grunt</code></p>

<p>我们也可以直接在Gruntfile.js中自定义任务，如</p>

<p>```js
grunt.registerTask(&lsquo;custom&rsquo;, &lsquo;This is a custom task&rsquo;, function () {</p>

<pre><code>console.log('custom!');
</code></pre>

<p>});
```</p>

<p>Grunt就说到这里，需要更多的干货可以看<a href="http://gruntjs.com/">官方文档</a>或<a href="https://github.com/gruntjs">Github</a></p>

<h1>Bower</h1>

<p><a href="http://bower.io/">Bower</a> is a package manager for the web. Bower是twitter推出的一个前端包管理工具，对于Javascript来
说，后端Node.js已经有了npm，Bower就是一个前端的npm，她的语法也是和npm一致的。</p>

<h2>Install Bower</h2>

<p><code>js
npm install bower -g
</code></p>

<h2>Usage</h2>

<h3>bower init</h3>

<p>初始化一个bower.json文件, <code>bower init</code></p>

<p>```js
{
  &ldquo;name&rdquo;: &ldquo;test&rdquo;,
  &ldquo;version&rdquo;: &ldquo;0.0.0&rdquo;,
  &ldquo;authors&rdquo;: [</p>

<pre><code>"aio &lt;mockingror@gmail.com&gt;"
</code></pre>

<p>  ],
  &ldquo;description&rdquo;: &ldquo;test&rdquo;,
  &ldquo;main&rdquo;: &ldquo;index.js&rdquo;,
  &ldquo;keywords&rdquo;: [</p>

<pre><code>"test"
</code></pre>

<p>  ],
  &ldquo;license&rdquo;: &ldquo;MIT&rdquo;,
  &ldquo;private&rdquo;: true
}
```</p>

<h3>bower install</h3>

<p><code>js
bower install jquery --save
</code></p>

<h3>bower uninstall</h3>

<p><code>js
bower uninstall jquery
</code></p>

<h3>MORE&hellip;</h3>

<p>bower search|register</p>

<h1>Yeoman</h1>

<p><a href="http://yeoman.io/">Yeoman</a>是一个Node.js项目生成工具，与其说是一个工具，它更是一个workflow，Yeoman整合了grunt和bower
，运用了大量的web开发最佳实践，为开发者打造一个更好更高效的workflow</p>

<h2>Install Yeoman</h2>

<p><code>js
npm install -g yo
</code></p>

<p>yo将自动为你安装好grunt和bower，所以上面说道的grunt和bower的安装方法都可以忘记啦，^_^.</p>

<h2>Install Generator</h2>

<p>Yeoman提供了一序列的生成器，一个生成器为你生成特定类型的项目，比如说一个普通的web项目，一个mobile项目，一个angular项
目，以web项目为例，首先需要安装相应的generator</p>

<p><code>js
npm install -g generator-webapp
</code></p>

<p>现在我们就可以使用<code>yo</code>来创建一个web项目了</p>

<p><code>js
yo webapp
</code></p>

<p>你可以选择是否使用Bootstrap和Modernizr，需要注意的是Yeoman默认安装的是sass版的bootstrap，所以需要系统安装了ruby和
compass来编译sass。命令执行完毕之后yeoman也会自动安装好grunt及其用到的plugins</p>

<h2>项目结构</h2>

<p>```js
.
├── app
│   ├── 404.html
│   ├── bower_components
│   ├── favicon.ico
│   ├── images
│   ├── index.html
│   ├── robots.txt
│   ├── scripts
│   └── styles
├── bower.json
├── Gruntfile.js
├── package.json
└── test</p>

<pre><code>├── index.html
├── lib
└── spec
</code></pre>

<p>```</p>

<p>执行完<code>yo webapp</code>会产生如上的目录结构，可以看到Yeoman已经为我们生成好了Bower和Grunt需要的配置文件以及node项目默认的<code>package.json</code>，<code>app</code>目录是用来存放前端代码的，<code>app/bower_components</code>存放了项目所依赖的bower package，<code>app\scripts</code>存
放开发者自己的javascript代码，同理<code>app/styles</code>存放css代码，<code>test</code>存放我们的测试代码</p>

<p>下面我们来运行一下这个项目</p>

<p><code>js
grunt server
</code></p>

<h1>Conclusion</h1>

<p>OK!我们已经如何用Yeoman+Bower+Grunt快速打造一个Vaible的Webapp，心动不如行动，快在你的项目中用起来吧！你会喜欢它的！</p>
]]></content>
  </entry>
  
</feed>
